from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
import os
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö—É—Ä—Å—ã
course = [
    "–£—Ä–æ–∫ 1: –í–≤–µ–¥–µ–Ω–∏–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.",
    "–£—Ä–æ–∫ 2: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ.",
    "–£—Ä–æ–∫ 3: –†–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.",
    "–£—Ä–æ–∫ 4: –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è.",
    "–£—Ä–æ–∫ 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞."
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫—É—Ä—Å–∞
class CourseStates(StatesGroup):
    lesson = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞
class TestStates(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìò –ù–∞—á–∞—Ç—å –∫—É—Ä—Å", callback_data='start_course'))
    keyboard.add(InlineKeyboardButton("üß† –ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç", callback_data='start_test'))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º.
–í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º:", reply_markup=keyboard)

# –ö—É—Ä—Å
@dp.callback_query_handler(lambda c: c.data == 'start_course')
async def start_course(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(lesson_number=0)
    await CourseStates.lesson.set()
    await send_lesson(callback_query.message, state)

@dp.callback_query_handler(lambda c: c.data == 'next_lesson', state=CourseStates.lesson)
async def next_lesson(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lesson_number = data.get('lesson_number', 0) + 1
    if lesson_number < len(course):
        await state.update_data(lesson_number=lesson_number)
        await send_lesson(callback_query.message, state)
    else:
        await callback_query.message.answer("–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
        await state.finish()

async def send_lesson(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lesson_number = data.get('lesson_number', 0)
    lesson = course[lesson_number]
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data='next_lesson'))
    await message.answer(f"{lesson}", reply_markup=keyboard)

# –¢–µ—Å—Ç
@dp.callback_query_handler(lambda c: c.data == 'start_test')
async def start_test(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üß† –í–æ–ø—Ä–æ—Å 1: –¢—ã –ª–µ–≥–∫–æ –≤—ã—Ä–∞–∂–∞–µ—à—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞?")
    await TestStates.q1.set()

@dp.message_handler(state=TestStates.q1)
async def test_q1(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text.lower())
    await message.answer("–í–æ–ø—Ä–æ—Å 2: –¢—ã —É–º–µ–µ—à—å —Å–ª—É—à–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞?")
    await TestStates.q2.set()

@dp.message_handler(state=TestStates.q2)
async def test_q2(message: types.Message, state: FSMContext):
    await state.update_data(q2=message.text.lower())
    await message.answer("–í–æ–ø—Ä–æ—Å 3: –¢—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏?")
    await TestStates.q3.set()

@dp.message_handler(state=TestStates.q3)
async def test_q3(message: types.Message, state: FSMContext):
    await state.update_data(q3=message.text.lower())
    data = await state.get_data()

    score = 0
    if "–¥–∞" in data["q1"]: score += 1
    if "–¥–∞" in data["q2"]: score += 1
    if "–¥–∞" in data["q3"]: score += 1

    if score == 3:
        text = "–¢—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω! üåü –ù–æ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —á–µ–º—É –ø–æ—É—á–∏—Ç—å—Å—è..."
    elif score == 2:
        text = "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏. –ù–µ–º–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏ ‚Äî –∏ –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! üëç"
    else:
        text = "–ü–æ—Ö–æ–∂–µ, —Ç–µ–±–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∑–Ω–∞–Ω–∏—è. üëá"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É –Ω–∞ Boosty", url="https://boosty.to/irina_s_vitriny/posts/80389461-2021-43f0-9c20-08668971a32b?share=post_link"))
    await message.answer(text, reply_markup=keyboard)
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
