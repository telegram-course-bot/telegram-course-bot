from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "üìÑ –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫–ª–∏—Å—Ç",
        "üí∞ –ö—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ Boosty"
    ]
    keyboard.add(*buttons)

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –∂–µ–Ω—â–∏–Ω–∞–º–∏!\n\n"
        "–í–æ—Ç —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫–ª–∏—Å—Ç"
@dp.message_handler(lambda message: message.text == "üìÑ –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫–ª–∏—Å—Ç")
async def send_checklist(message: types.Message):
    with open("course.pdf", "rb") as pdf:
        await message.answer_document(pdf, caption="–í–æ—Ç —Ç–≤–æ–π —á–µ–∫–ª–∏—Å—Ç üíº")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ Boosty"
@dp.message_handler(lambda message: message.text == "üí∞ –ö—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ Boosty")
async def send_boosty_link(message: types.Message):
    await message.answer("–û–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É: https://boosty.to/irina_s_vitriny/posts/80389461-2021-43f0-9c20-08668971a32b?share=post_link")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
