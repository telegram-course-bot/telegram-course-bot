from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
import os
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞
class TestStates(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìã –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫–ª–∏—Å—Ç", "üé• –°–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ-—É—Ä–æ–∫")
    keyboard.add("üì¶ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞", "üî• –ö—É–ø–∏—Ç—å –∫—É—Ä—Å —á–µ—Ä–µ–∑ Boosty")
    keyboard.add("üß† –ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    return keyboard

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(lambda m: m.text == "üìã –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫–ª–∏—Å—Ç")
async def checklist(message: types.Message):
    await message.answer("–í–æ—Ç —Ç–≤–æ–π —á–µ–∫–ª–∏—Å—Ç ‚úÖ:
1. –ü–æ–¥—É–º–∞–π –æ —Ü–µ–ª—è—Ö...
2. ...")

@dp.message_handler(lambda m: m.text == "üé• –°–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ-—É—Ä–æ–∫")
async def demo_lesson(message: types.Message):
    await message.answer("üé¨ –î–µ–º–æ-—É—Ä–æ–∫: https://t.me/your_demo_lesson")

@dp.message_handler(lambda m: m.text == "üì¶ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞")
async def course_outline(message: types.Message):
    await message.answer("üìö –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞:
- –£—Ä–æ–∫ 1
- –£—Ä–æ–∫ 2
...")

@dp.message_handler(lambda m: m.text == "üî• –ö—É–ø–∏—Ç—å –∫—É—Ä—Å —á–µ—Ä–µ–∑ Boosty")
async def buy_course(message: types.Message):
    await message.answer("üöÄ –ö—É–ø–∏—Ç—å –∫—É—Ä—Å: https://boosty.to/irina_s_vitriny/posts/80389461-2021-43f0-9c20-08668971a32b?share=post_link")

@dp.message_handler(lambda m: m.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–≤—Ç–æ—Ä—É –∫—É—Ä—Å–∞.")

# –¢–µ—Å—Ç ‚Äî –∑–∞–ø—É—Å–∫ –∏–∑ –º–µ–Ω—é
@dp.message_handler(lambda m: m.text == "üß† –ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç")
async def start_test(message: types.Message, state: FSMContext):
    await message.answer("üß† –í–æ–ø—Ä–æ—Å 1: –¢—ã –ª–µ–≥–∫–æ –≤—ã—Ä–∞–∂–∞–µ—à—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞?")
    await TestStates.q1.set()

@dp.message_handler(state=TestStates.q1)
async def test_q1(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text.lower())
    await message.answer("–í–æ–ø—Ä–æ—Å 2: –¢—ã —É–º–µ–µ—à—å —Å–ª—É—à–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞?")
    await TestStates.q2.set()

@dp.message_handler(state=TestStates.q2)
async def test_q2(message: types.Message, state: FSMContext):
    await state.update_data(q2=message.text.lower())
    await message.answer("–í–æ–ø—Ä–æ—Å 3: –¢—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏?")
    await TestStates.q3.set()

@dp.message_handler(state=TestStates.q3)
async def test_q3(message: types.Message, state: FSMContext):
    await state.update_data(q3=message.text.lower())
    data = await state.get_data()

    score = 0
    if "–¥–∞" in data["q1"]: score += 1
    if "–¥–∞" in data["q2"]: score += 1
    if "–¥–∞" in data["q3"]: score += 1

    if score == 3:
        text = "–¢—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω! üåü –ù–æ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —á–µ–º—É –ø–æ—É—á–∏—Ç—å—Å—è..."
    elif score == 2:
        text = "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏. –ù–µ–º–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏ ‚Äî –∏ –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! üëç"
    else:
        text = "–ü–æ—Ö–æ–∂–µ, —Ç–µ–±–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∑–Ω–∞–Ω–∏—è. üëá"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É –Ω–∞ Boosty", url="https://boosty.to/irina_s_vitriny/posts/80389461-2021-43f0-9c20-08668971a32b?share=post_link"))
    await message.answer(text, reply_markup=keyboard)
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
