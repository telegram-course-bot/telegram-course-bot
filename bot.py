
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart

API_TOKEN = '7985180070:AAHn98xLc8H_JPVtzrYftMiZu0lbeEQwf6M'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üìã –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫–ª–∏—Å—Ç")],
    [KeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ Boosty")]
])

# –ö–Ω–æ–ø–∫–∞ Boosty
boosty_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí∞ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Boosty", url="https://boosty.to/irina_s_vitriny/posts/80389461-2021-43f0-9c20-08668971a32b")]
])

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –∫—É—Ä—Å–∞ '–ù–µ —Ç–µ—Ä—è–π —Å–µ–±—è'.\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:",
        reply_markup=keyboard
    )

@dp.message(lambda message: message.text == "üìã –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫–ª–∏—Å—Ç")
async def send_checklist(message: types.Message):
    await message.answer_document(types.FSInputFile("–ß–µ–∫–ª–∏—Å—Ç_–∏_—à–ø–∞—Ä–≥–∞–ª–∫–∞.pdf"))

@dp.message(lambda message: message.text == "üí∞ –ö—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ Boosty")
async def send_boosty(message: types.Message):
    await message.answer(
        "üëâ –û–ø–ª–∞—Ç–∏ –∫—É—Ä—Å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ. –ï—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è ‚Äî –Ω–∞–∂–º–∏ ‚ãÆ –≤–≤–µ—Ä—Ö—É –∏ –≤—ã–±–µ—Ä–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ¬ª.",
        reply_markup=boosty_button
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
